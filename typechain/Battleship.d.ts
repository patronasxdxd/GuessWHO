/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BattleshipInterface extends ethers.utils.Interface {
  functions: {
    "createGame(bytes,uint256)": FunctionFragment;
    "createVerifier()": FunctionFragment;
    "game(uint32)": FunctionFragment;
    "joinGame(uint32,bytes,uint256)": FunctionFragment;
    "moveVerifier()": FunctionFragment;
    "submitMove(uint32,uint256,uint256,bytes,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createGame",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "game", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "joinGame",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "moveVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitMove",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "game", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moveVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitMove", data: BytesLike): Result;

  events: {};
}

export class Battleship extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BattleshipInterface;

  functions: {
    createGame(
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createVerifier(overrides?: CallOverrides): Promise<[string]>;

    game(
      _gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          ([BigNumber, BigNumber, boolean] & {
            x: BigNumber;
            y: BigNumber;
            isHit: boolean;
          })[]
        ] & {
          player1: string;
          player2: string;
          player1Hash: BigNumber;
          player2Hash: BigNumber;
          moves: ([BigNumber, BigNumber, boolean] & {
            x: BigNumber;
            y: BigNumber;
            isHit: boolean;
          })[];
        }
      ]
    >;

    joinGame(
      _gameID: BigNumberish,
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moveVerifier(overrides?: CallOverrides): Promise<[string]>;

    submitMove(
      _gameID: BigNumberish,
      _moveX: BigNumberish,
      _moveY: BigNumberish,
      _proof: BytesLike,
      isPreviousMoveAHit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createGame(
    _proof: BytesLike,
    _boardHash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createVerifier(overrides?: CallOverrides): Promise<string>;

  game(
    _gameID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      ([BigNumber, BigNumber, boolean] & {
        x: BigNumber;
        y: BigNumber;
        isHit: boolean;
      })[]
    ] & {
      player1: string;
      player2: string;
      player1Hash: BigNumber;
      player2Hash: BigNumber;
      moves: ([BigNumber, BigNumber, boolean] & {
        x: BigNumber;
        y: BigNumber;
        isHit: boolean;
      })[];
    }
  >;

  joinGame(
    _gameID: BigNumberish,
    _proof: BytesLike,
    _boardHash: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moveVerifier(overrides?: CallOverrides): Promise<string>;

  submitMove(
    _gameID: BigNumberish,
    _moveX: BigNumberish,
    _moveY: BigNumberish,
    _proof: BytesLike,
    isPreviousMoveAHit: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGame(
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    createVerifier(overrides?: CallOverrides): Promise<string>;

    game(
      _gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        ([BigNumber, BigNumber, boolean] & {
          x: BigNumber;
          y: BigNumber;
          isHit: boolean;
        })[]
      ] & {
        player1: string;
        player2: string;
        player1Hash: BigNumber;
        player2Hash: BigNumber;
        moves: ([BigNumber, BigNumber, boolean] & {
          x: BigNumber;
          y: BigNumber;
          isHit: boolean;
        })[];
      }
    >;

    joinGame(
      _gameID: BigNumberish,
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    moveVerifier(overrides?: CallOverrides): Promise<string>;

    submitMove(
      _gameID: BigNumberish,
      _moveX: BigNumberish,
      _moveY: BigNumberish,
      _proof: BytesLike,
      isPreviousMoveAHit: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createGame(
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    game(_gameID: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    joinGame(
      _gameID: BigNumberish,
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moveVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    submitMove(
      _gameID: BigNumberish,
      _moveX: BigNumberish,
      _moveY: BigNumberish,
      _proof: BytesLike,
      isPreviousMoveAHit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    game(
      _gameID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinGame(
      _gameID: BigNumberish,
      _proof: BytesLike,
      _boardHash: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moveVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitMove(
      _gameID: BigNumberish,
      _moveX: BigNumberish,
      _moveY: BigNumberish,
      _proof: BytesLike,
      isPreviousMoveAHit: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
